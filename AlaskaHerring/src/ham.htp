#if !defined(_ham_)
#  define _ham_

class model_data : public ad_comm{
  int b_simulation_flag;
  int rseed;
  int retro_yrs;
  data_int DEBUG_FLAG;
  init_adstring DataFile;
  init_adstring ControlFile;
  data_int dat_syr;
  data_int dat_nyr;
  data_int mod_syr;
  data_int mod_nyr;
  data_int sage;
  data_int nage;
  int rec_syr;
  dvector age;
  data_int nFecBlocks;
  data_ivector nFecBlockYears;
  data_vector fec_slope;
  data_vector fec_inter;
  data_matrix data_ct_raw;
  data_matrix data_sp_waa;
  data_matrix data_cm_waa;
  data_matrix data_cm_comp;
  data_matrix data_sp_comp;
  data_matrix data_egg_dep;
  data_matrix data_mileday;
  dvector avg_sp_waa;
  dmatrix Eij;
  data_int dat_eof;
  int n_theta;
  data_matrix theta_DM;
  dvector theta_ival;
  dvector theta_lb;
  dvector theta_ub;
  ivector theta_phz;
  ivector theta_iprior;
  dvector theta_p1;
  dvector theta_p2;
  data_int mat_phz;
  data_int nMatBlocks;
  data_ivector nMatBlockYear;
  data_int mort_type;
  data_int mort_dev_phz;
  data_int nMortBlocks;
  data_ivector nMortBlockYear;
  int nSlxCols;
  data_int nSlxBlks;
  data_matrix selex_cont;
  ivector nSelType;
  ivector nslx_phz;
  ivector nslx_rows;
  ivector nslx_cols;
  ivector nslx_syr;
  ivector nslx_nyr;
  data_int nMiscCont;
  data_vector dMiscCont;
  dmatrix data_catch;
  data_int ctl_eof;
  int nf;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number_vector theta;
  param_number log_natural_mortality;
  param_number log_rinit;
  param_number log_rbar;
  param_number log_ro;
  param_number log_reck;
  param_number log_sigma_r;
  param_init_bounded_dev_vector log_rinit_devs;
  param_init_bounded_dev_vector log_rbar_devs;
  param_init_bounded_matrix mat_params;
  param_matrix mat;
  param_init_bounded_dev_vector log_m_devs;
  param_matrix Mij;
  param_init_bounded_matrix_vector log_slx_pars;
  param_matrix log_slx;
  param_init_bounded_vector log_ft_pars;
  param_number ro;
  param_number reck;
  param_number so;
  param_number beta;
  param_number fore_sb;
  param_number fore_vb;
  param_number ghl;
  param_vector ssb;
  param_vector recruits;
  param_vector spawners;
  param_vector resd_rec;
  param_vector pred_egg_dep;
  param_vector resd_egg_dep;
  param_vector pred_mileday;
  param_vector resd_mileday;
  param_vector pred_catch;
  param_vector resd_catch;
  param_matrix Nij;
  param_matrix Oij;
  param_matrix Pij;
  param_matrix Sij;
  param_matrix Qij;
  param_matrix Cij;
  param_matrix Fij;
  param_matrix pred_cm_comp;
  param_matrix resd_cm_comp;
  param_matrix pred_sp_comp;
  param_matrix resd_sp_comp;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value f;
  param_number fpen;
  param_stddev_number sd_terminal_ssb;
  param_stddev_number sd_forecast_ssb;
  param_stddev_number sd_projected_ssb;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
 void runForecast();
 void writePosteriorSamples();
 void runSimulationModel(const int& rseed);
 void initializeModelParameters();
 void initializeMaturitySchedules();
 void calcNaturalMortality();
 void calcSelectivity();
 void calcFishingMortalitiy();
 void initializeStateVariables();
 void updateStateVariables();
 void calcSpawningStockRecruitment();
 void calcAgeCompResiduals();
 void calcEggSurveyResiduals();
 void calcMiledaySurveyResiduals();
 void calcCatchResiduals();
 void calcObjectiveFunction();
 dvar_vector calcPriors();

};
#endif
