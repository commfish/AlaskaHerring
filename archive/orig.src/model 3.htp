#if !defined(_model_)
#  define _model_

class model_data : public ad_comm{
  ofstream *   pad_evalout;
  init_adstring DataFile;
  init_adstring ControlFile;
  init_adstring Graphics;
  data_int nages;
  data_int dat_styr;
  data_int dat_endyr;
  data_int mod_styr;
  data_int mod_endyr;
  int dyrs;
  int myrs;
  int md_offset;
  dvector Year;
  int i;
  int j;
  data_number Thresh;
  data_number Thresh_denom;
  data_vector Threshold;
  data_vector fw_a_a;
  data_number F_Bk;
  data_vector F_Bk_Yrs;
  data_vector F_slope;
  data_vector F_inter;
  dvector F_Bk_Idx;
  data_number S_Bk;
  data_vector S_Bk_Yrs;
  dvector S_Bk_Idx;
  data_number mat_Bk;
  data_vector mat_Bk_Yrs;
  dvector mat_Bk_Idx;
  data_number gs_Bk;
  data_vector gs_Bk_Yrs;
  dvector gs_Bk_Idx;
  data_number ph_Int;
  data_number ph_S;
  data_number ph_mat_a;
  data_number ph_gs_a;
  data_number ph_gs_b;
  data_number ph_mat_b;
  data_number ph_Rec;
  data_number ph_Ric;
  data_number ph_md;
  data_number lC;
  data_number lS;
  data_number lR;
  data_vector lE;
  data_vector lM;
  data_number eof1;
  data_vector tcb;
  data_matrix obs_sp_waa;
  data_matrix obs_c_waa;
  data_matrix obs_c_comp;
  data_matrix obs_sp_comp;
  data_vector tot_obs_egg;
  data_vector mile_days;
  dvector tcbm;
  data_number eof2;
  data_vector mod_yrs;
  data_vector yminusthree;
  data_vector yminustwo;
  data_vector yminusone;
  data_number yminusthreeFOR;
  data_number yminustwoFOR;
  data_number yminusoneFOR;
  data_number eof3;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_vector init_age_3;
  param_init_bounded_vector init_pop;
  param_init_bounded_number log_alpha;
  param_init_number log_beta;
  param_number alpha;
  param_number beta;
  param_init_bounded_vector M;
  param_matrix Sur;
  param_vector S;
  param_number S_for;
  param_init_bounded_vector mat_a;
  param_init_bounded_vector mat_b;
  param_init_bounded_vector gs_a;
  param_init_bounded_vector gs_b;
  param_init_bounded_number md_c;
  param_matrix GS;
  param_matrix GS_Sc;
  param_matrix Mat;
  param_vector int1;
  param_matrix int2;
  param_vector int3;
  param_vector mat_for;
  param_matrix naa;
  param_matrix sel_naa;
  param_matrix sel_naa_prop;
  param_matrix est_c_naa;
  param_matrix est_sp_naa;
  param_matrix est_sp_comp;
  param_matrix est_sp_baa;
  param_matrix est_mat_naa;
  param_matrix est_mat_baa;
  param_matrix post_naa;
  param_matrix est_egg_naa;
