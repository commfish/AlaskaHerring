#define SEPFUN1
#define SEPFUN3
#define SEPFUN4
class model_data : public ad_comm{
  public:
  ofstream *   pad_evalout;
  init_adstring  DataFile;
  init_adstring  ControlFile;
  init_adstring  Graphics;
  data_int  nages;
  data_int  dat_styr;
  data_int  dat_endyr;
  data_int  mod_styr;
  data_int  mod_endyr;
  int dyrs;
  int myrs;
  int md_offset;
  dvector Year;
  int i;
  int j;
  data_number  Thresh;
  data_number  Thresh_denom;
  data_vector Threshold;
  data_vector fw_a_a;
  data_number  F_Bk;
  data_vector F_Bk_Yrs;
  data_vector F_slope;
  data_vector F_inter;
  dvector F_Bk_Idx;
  data_number  S_Bk;
  data_vector S_Bk_Yrs;
  dvector S_Bk_Idx;
  data_number  mat_Bk;
  data_vector mat_Bk_Yrs;
  dvector mat_Bk_Idx;
  data_number  gs_Bk;
  data_vector gs_Bk_Yrs;
  dvector gs_Bk_Idx;
  data_number  ph_Int;
  data_number  ph_S;
  data_number  ph_mat_a;
  data_number  ph_gs_a;
  data_number  ph_gs_b;
  data_number  ph_mat_b;
  data_number  ph_Rec;
  data_number  ph_Ric;
  data_number  ph_md;
  data_number  lC;
  data_number  lS;
  data_number  lR;
  data_vector lE;
  data_vector lM;
  data_number  eof1;
  data_vector tcb;
  data_matrix obs_sp_waa;
  data_matrix obs_c_waa;
  data_matrix obs_c_comp;
  data_matrix obs_sp_comp;
  data_vector tot_obs_egg;
  data_vector mile_days;
  dvector tcbm;
  data_number  eof2;
  data_vector mod_yrs;
  data_vector yminusthree;
  data_vector yminustwo;
  data_vector yminusone;
  data_number  yminusthreeFOR;
  data_number  yminustwoFOR;
  data_number  yminusoneFOR;
  data_number  eof3;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  friend class df1b2_pre_parameters;
  friend class df1b2_parameters;
  static model_parameters * model_parameters_ptr;
  static model_parameters * get_model_parameters_ptr(void)
  {
    return model_parameters_ptr;
  }
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  void begin_df1b2_funnel(void);
  void end_df1b2_funnel(void);
  dvector double_control_flags;
